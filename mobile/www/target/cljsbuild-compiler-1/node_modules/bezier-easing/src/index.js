goog.provide("module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index");
goog.provide("module$bezier_easing");
goog.provide("module$bezier_easing$src$index");
goog.provide("module$bezier_easing$src");
var module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index={};var NEWTON_ITERATIONS$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index=4;var NEWTON_MIN_SLOPE$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index=.001;var SUBDIVISION_PRECISION$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index=1E-7;
var SUBDIVISION_MAX_ITERATIONS$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index=10;var kSplineTableSize$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index=11;var kSampleStepSize$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index=1/(kSplineTableSize$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index-1);
var float32ArraySupported$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index=typeof Float32Array==="function";function A$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index(aA1,aA2){return 1-3*aA2+3*aA1}function B$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index(aA1,aA2){return 3*aA2-6*aA1}function C$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index(aA1){return 3*aA1}
function calcBezier$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index(aT,aA1,aA2){return((A$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index(aA1,aA2)*aT+B$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index(aA1,aA2))*aT+C$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index(aA1))*aT}
function getSlope$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index(aT,aA1,aA2){return 3*A$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index(aA1,aA2)*aT*aT+2*B$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index(aA1,aA2)*aT+C$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index(aA1)}
function binarySubdivide$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index(aX,aA,aB,mX1,mX2){var currentX;var currentT;var i=0;do{currentT=aA+(aB-aA)/2;currentX=calcBezier$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index(currentT,mX1,mX2)-aX;if(currentX>0)aB=currentT;else aA=currentT}while(Math.abs(currentX)>SUBDIVISION_PRECISION$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index&&++i<SUBDIVISION_MAX_ITERATIONS$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index);
return currentT}
function newtonRaphsonIterate$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index(aX,aGuessT,mX1,mX2){for(var i=0;i<NEWTON_ITERATIONS$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index;++i){var currentSlope=getSlope$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index(aGuessT,mX1,mX2);if(currentSlope===0)return aGuessT;var currentX=calcBezier$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index(aGuessT,mX1,
mX2)-aX;aGuessT-=currentX/currentSlope}return aGuessT}function LinearEasing$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index(x){return x}
module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index["default"]=function bezier(mX1,mY1,mX2,mY2){if(!(0<=mX1&&mX1<=1&&0<=mX2&&mX2<=1))throw new Error("bezier x values must be in [0, 1] range");if(mX1===mY1&&mX2===mY2)return LinearEasing$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index;var sampleValues=float32ArraySupported$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index?new Float32Array(kSplineTableSize$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index):
new Array(kSplineTableSize$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index);for(var i=0;i<kSplineTableSize$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index;++i)sampleValues[i]=calcBezier$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index(i*kSampleStepSize$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index,mX1,mX2);function getTForX(aX){var intervalStart=0;var currentSample=
1;var lastSample=kSplineTableSize$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample)intervalStart+=kSampleStepSize$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index;--currentSample;var dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);var guessForT=intervalStart+dist*kSampleStepSize$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index;
var initialSlope=getSlope$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index)return newtonRaphsonIterate$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index(aX,guessForT,mX1,mX2);else if(initialSlope===0)return guessForT;else return binarySubdivide$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index(aX,
intervalStart,intervalStart+kSampleStepSize$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index,mX1,mX2)}return function BezierEasing(x){if(x===0)return 0;if(x===1)return 1;return calcBezier$$module$Applications$server$dungeon_builder$node_modules$bezier_easing$src$index(getTForX(x),mY1,mY2)}}